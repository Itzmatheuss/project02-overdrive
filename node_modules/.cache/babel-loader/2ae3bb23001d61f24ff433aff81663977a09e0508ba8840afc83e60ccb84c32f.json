{"ast":null,"code":"const Mask = cpf => {\n  cpf = cpf.replace(/\\D/g, \"\");\n\n  // Verifica se o CPF tem 11 dígitos\n  if (cpf.length !== 11) {\n    return false;\n  }\n\n  // Verifica se todos os dígitos são iguais, o que invalidaria o CPF\n  if (/^(\\d)\\1{10}$/.test(cpf)) {\n    return false;\n  }\n\n  // Calcula o primeiro dígito verificador\n  let soma = 0;\n  for (let i = 0; i < 9; i++) {\n    soma += parseInt(cpf.charAt(i)) * (10 - i);\n  }\n  let resto = 11 - soma % 11;\n  let digitoVerificador1 = resto === 10 || resto === 11 ? 0 : resto;\n\n  // Verifica o primeiro dígito verificador\n  if (digitoVerificador1 !== parseInt(cpf.charAt(9))) {\n    return false;\n  }\n\n  // Calcula o segundo dígito verificador\n  soma = 0;\n  for (let i = 0; i < 10; i++) {\n    soma += parseInt(cpf.charAt(i)) * (11 - i);\n  }\n  resto = 11 - soma % 11;\n  let digitoVerificador2 = resto === 10 || resto === 11 ? 0 : resto;\n\n  // Verifica o segundo dígito verificador\n  if (digitoVerificador2 !== parseInt(cpf.charAt(10))) {\n    return false;\n  }\n\n  // Se passar por todas as verificações, o CPF é válido\n  return true;\n};\n_c = Mask;\nexport default Mask;\nvar _c;\n$RefreshReg$(_c, \"Mask\");","map":{"version":3,"names":["Mask","cpf","replace","length","test","soma","i","parseInt","charAt","resto","digitoVerificador1","digitoVerificador2","_c","$RefreshReg$"],"sources":["C:/Users/mathe/OneDrive/Área de Trabalho/Estagio/React/React Web/react-web-model/src/hooks/Mask.js"],"sourcesContent":["const Mask = (cpf) => {\r\n  cpf = cpf.replace(/\\D/g, \"\");\r\n\r\n  // Verifica se o CPF tem 11 dígitos\r\n  if (cpf.length !== 11) {\r\n    return false;\r\n  }\r\n\r\n  // Verifica se todos os dígitos são iguais, o que invalidaria o CPF\r\n  if (/^(\\d)\\1{10}$/.test(cpf)) {\r\n    return false;\r\n  }\r\n\r\n  // Calcula o primeiro dígito verificador\r\n  let soma = 0;\r\n  for (let i = 0; i < 9; i++) {\r\n    soma += parseInt(cpf.charAt(i)) * (10 - i);\r\n  }\r\n  let resto = 11 - (soma % 11);\r\n  let digitoVerificador1 = resto === 10 || resto === 11 ? 0 : resto;\r\n\r\n  // Verifica o primeiro dígito verificador\r\n  if (digitoVerificador1 !== parseInt(cpf.charAt(9))) {\r\n    return false;\r\n  }\r\n\r\n  // Calcula o segundo dígito verificador\r\n  soma = 0;\r\n  for (let i = 0; i < 10; i++) {\r\n    soma += parseInt(cpf.charAt(i)) * (11 - i);\r\n  }\r\n  resto = 11 - (soma % 11);\r\n  let digitoVerificador2 = resto === 10 || resto === 11 ? 0 : resto;\r\n\r\n  // Verifica o segundo dígito verificador\r\n  if (digitoVerificador2 !== parseInt(cpf.charAt(10))) {\r\n    return false;\r\n  }\r\n\r\n  // Se passar por todas as verificações, o CPF é válido\r\n  return true;\r\n};\r\n\r\nexport default Mask;\r\n"],"mappings":"AAAA,MAAMA,IAAI,GAAIC,GAAG,IAAK;EACpBA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;EAE5B;EACA,IAAID,GAAG,CAACE,MAAM,KAAK,EAAE,EAAE;IACrB,OAAO,KAAK;EACd;;EAEA;EACA,IAAI,cAAc,CAACC,IAAI,CAACH,GAAG,CAAC,EAAE;IAC5B,OAAO,KAAK;EACd;;EAEA;EACA,IAAII,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,IAAI,IAAIE,QAAQ,CAACN,GAAG,CAACO,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EAC5C;EACA,IAAIG,KAAK,GAAG,EAAE,GAAIJ,IAAI,GAAG,EAAG;EAC5B,IAAIK,kBAAkB,GAAGD,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,EAAE,GAAG,CAAC,GAAGA,KAAK;;EAEjE;EACA,IAAIC,kBAAkB,KAAKH,QAAQ,CAACN,GAAG,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;IAClD,OAAO,KAAK;EACd;;EAEA;EACAH,IAAI,GAAG,CAAC;EACR,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BD,IAAI,IAAIE,QAAQ,CAACN,GAAG,CAACO,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EAC5C;EACAG,KAAK,GAAG,EAAE,GAAIJ,IAAI,GAAG,EAAG;EACxB,IAAIM,kBAAkB,GAAGF,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,EAAE,GAAG,CAAC,GAAGA,KAAK;;EAEjE;EACA,IAAIE,kBAAkB,KAAKJ,QAAQ,CAACN,GAAG,CAACO,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE;IACnD,OAAO,KAAK;EACd;;EAEA;EACA,OAAO,IAAI;AACb,CAAC;AAACI,EAAA,GAzCIZ,IAAI;AA2CV,eAAeA,IAAI;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}